generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Customer {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  taxNumber  String?   @map("tax_number")
  address    String?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  
  invoices   Invoice[]

  @@map("customers")
}

model Invoice {
  id          String        @id @default(uuid())
  customerId  String        @map("customer_id")
  number      String        @unique
  date        DateTime
  dueDate     DateTime      @map("due_date")
  status      InvoiceStatus @default(DRAFT)
  totalAmount Decimal       @map("total_amount") @db.Decimal(10, 2)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items       InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoiceId   String  @map("invoice_id")
  description String
  quantity    Int
  unitPrice   Decimal @map("unit_price") @db.Decimal(10, 2)
  total       Decimal @db.Decimal(10, 2)
  
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  CANCELLED
}
